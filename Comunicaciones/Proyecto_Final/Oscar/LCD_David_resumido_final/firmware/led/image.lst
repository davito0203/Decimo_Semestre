
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000340  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000040  00000340  00000340  00000394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00000380  00000380  000003d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00000384  00000384  000003d8  2**2
                  ALLOC
  4 .debug_abbrev 00000148  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000026a  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000314  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d3  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000007b  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000004a  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000011c  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000027  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 03 90 	ori gp,gp,0x390
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 03 84 	ori r1,r1,0x384
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 03 88 	ori r3,r3,0x388

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 0c 	calli 8c <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <main>:

/* prototypes */


int main ()
{
  8c:	37 9c ff d4 	addi sp,sp,-44
  90:	5b 8b 00 2c 	sw (sp+44),r11
  94:	5b 8c 00 28 	sw (sp+40),r12
  98:	5b 8d 00 24 	sw (sp+36),r13
  9c:	5b 8e 00 20 	sw (sp+32),r14
  a0:	5b 8f 00 1c 	sw (sp+28),r15
  a4:	5b 90 00 18 	sw (sp+24),r16
  a8:	5b 91 00 14 	sw (sp+20),r17
  ac:	5b 92 00 10 	sw (sp+16),r18
  b0:	5b 93 00 0c 	sw (sp+12),r19
  b4:	5b 94 00 08 	sw (sp+8),r20
  b8:	5b 9d 00 04 	sw (sp+4),ra

uint32_t a=1;
//uint32_t dato;
	
uint32_t estado=0;
uint32_t cont=1;
  bc:	34 0c 00 01 	mvi r12,1


uint32_t a=1;
//uint32_t dato;
	
uint32_t estado=0;
  c0:	34 0d 00 00 	mvi r13,0

int main ()
{


uint32_t a=1;
  c4:	34 0b 00 01 	mvi r11,1

if(t()==a){

////inicio

switch(estado){
  c8:	34 0e 00 01 	mvi r14,1
	cont=cont+1;
	if(cont==4)estado=estado+1;
	break;
case 1: titulo(cont);
	cont=cont+1;
	if(cont==14)estado=estado+1;
  cc:	34 14 00 0e 	mvi r20,14
  d0:	34 0f 00 02 	mvi r15,2
////inicio

switch(estado){
case 0:lcd_iniciar(cont);
	cont=cont+1;
	if(cont==4)estado=estado+1;
  d4:	34 13 00 04 	mvi r19,4
	cont=cont+1;
	if(cont==14)estado=estado+1;
	break;
case 2: espacio1(cont);
	cont=cont+1;
	if (cont==15)estado=estado+1;
  d8:	34 12 00 0f 	mvi r18,15
  dc:	34 10 00 03 	mvi r16,3
	break;
case 3: titulo1(cont);
	cont=cont+1;
	if (cont==21)estado=estado+1;
  e0:	34 11 00 15 	mvi r17,21
uint32_t estado=0;
uint32_t cont=1;

while(1){

if(t()==a){
  e4:	f8 00 00 28 	calli 184 <t>
  e8:	44 2b 00 06 	be r1,r11,100 <main+0x74>
/////////////////////////////////////////////
a=0;
}


if(t()==0) a=1;
  ec:	f8 00 00 26 	calli 184 <t>
  f0:	5c 20 ff fd 	bne r1,r0,e4 <main+0x58>
  f4:	34 0b 00 01 	mvi r11,1
uint32_t estado=0;
uint32_t cont=1;

while(1){

if(t()==a){
  f8:	f8 00 00 23 	calli 184 <t>
  fc:	5c 2b ff fc 	bne r1,r11,ec <main+0x60>

////inicio

switch(estado){
 100:	45 ae 00 1a 	be r13,r14,168 <main+0xdc>
 104:	5d a0 00 08 	bne r13,r0,124 <main+0x98>
case 0:lcd_iniciar(cont);
 108:	b9 80 08 00 	mv r1,r12
	cont=cont+1;
 10c:	35 8c 00 01 	addi r12,r12,1
if(t()==a){

////inicio

switch(estado){
case 0:lcd_iniciar(cont);
 110:	f8 00 00 22 	calli 198 <lcd_iniciar>
/////cada cuanto cambia el dato
//dato=(char)traer();

//uart_putchar(dato);
/////////////////////////////////////////////
a=0;
 114:	34 0b 00 00 	mvi r11,0
////inicio

switch(estado){
case 0:lcd_iniciar(cont);
	cont=cont+1;
	if(cont==4)estado=estado+1;
 118:	5d 93 ff f5 	bne r12,r19,ec <main+0x60>
 11c:	34 0d 00 01 	mvi r13,1
 120:	e3 ff ff f3 	bi ec <main+0x60>

if(t()==a){

////inicio

switch(estado){
 124:	45 af 00 0a 	be r13,r15,14c <main+0xc0>
/////cada cuanto cambia el dato
//dato=(char)traer();

//uart_putchar(dato);
/////////////////////////////////////////////
a=0;
 128:	34 0b 00 00 	mvi r11,0

if(t()==a){

////inicio

switch(estado){
 12c:	5d b0 ff f0 	bne r13,r16,ec <main+0x60>
	break;
case 2: espacio1(cont);
	cont=cont+1;
	if (cont==15)estado=estado+1;
	break;
case 3: titulo1(cont);
 130:	b9 80 08 00 	mv r1,r12
	cont=cont+1;
 134:	35 8c 00 01 	addi r12,r12,1
	break;
case 2: espacio1(cont);
	cont=cont+1;
	if (cont==15)estado=estado+1;
	break;
case 3: titulo1(cont);
 138:	f8 00 00 60 	calli 2b8 <titulo1>
/////cada cuanto cambia el dato
//dato=(char)traer();

//uart_putchar(dato);
/////////////////////////////////////////////
a=0;
 13c:	34 0b 00 00 	mvi r11,0
	cont=cont+1;
	if (cont==15)estado=estado+1;
	break;
case 3: titulo1(cont);
	cont=cont+1;
	if (cont==21)estado=estado+1;
 140:	5d 91 ff eb 	bne r12,r17,ec <main+0x60>
 144:	34 0d 00 04 	mvi r13,4
 148:	e3 ff ff e9 	bi ec <main+0x60>
	break;
case 1: titulo(cont);
	cont=cont+1;
	if(cont==14)estado=estado+1;
	break;
case 2: espacio1(cont);
 14c:	b9 80 08 00 	mv r1,r12
	cont=cont+1;
 150:	35 8c 00 01 	addi r12,r12,1
	break;
case 1: titulo(cont);
	cont=cont+1;
	if(cont==14)estado=estado+1;
	break;
case 2: espacio1(cont);
 154:	f8 00 00 4c 	calli 284 <espacio1>
/////cada cuanto cambia el dato
//dato=(char)traer();

//uart_putchar(dato);
/////////////////////////////////////////////
a=0;
 158:	34 0b 00 00 	mvi r11,0
	cont=cont+1;
	if(cont==14)estado=estado+1;
	break;
case 2: espacio1(cont);
	cont=cont+1;
	if (cont==15)estado=estado+1;
 15c:	5d 92 ff e4 	bne r12,r18,ec <main+0x60>
 160:	34 0d 00 03 	mvi r13,3
 164:	e3 ff ff e2 	bi ec <main+0x60>
switch(estado){
case 0:lcd_iniciar(cont);
	cont=cont+1;
	if(cont==4)estado=estado+1;
	break;
case 1: titulo(cont);
 168:	b9 80 08 00 	mv r1,r12
	cont=cont+1;
 16c:	35 8c 00 01 	addi r12,r12,1
switch(estado){
case 0:lcd_iniciar(cont);
	cont=cont+1;
	if(cont==4)estado=estado+1;
	break;
case 1: titulo(cont);
 170:	f8 00 00 20 	calli 1f0 <titulo>
/////cada cuanto cambia el dato
//dato=(char)traer();

//uart_putchar(dato);
/////////////////////////////////////////////
a=0;
 174:	34 0b 00 00 	mvi r11,0
	cont=cont+1;
	if(cont==4)estado=estado+1;
	break;
case 1: titulo(cont);
	cont=cont+1;
	if(cont==14)estado=estado+1;
 178:	5d 94 ff dd 	bne r12,r20,ec <main+0x60>
 17c:	34 0d 00 02 	mvi r13,2
 180:	e3 ff ff db 	bi ec <main+0x60>

00000184 <t>:
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}
*/
uint32_t t(){

return timer0->ledo;
 184:	78 01 00 00 	mvhi r1,0x0
 188:	38 21 03 80 	ori r1,r1,0x380
 18c:	28 21 00 00 	lw r1,(r1+0)
}
 190:	28 21 00 00 	lw r1,(r1+0)
 194:	c3 a0 00 00 	ret

00000198 <lcd_iniciar>:
//////////////////////////////////////LCD



void lcd_iniciar(int c_inicio){
timer0->E=1;
 198:	78 02 00 00 	mvhi r2,0x0
 19c:	38 42 03 80 	ori r2,r2,0x380
 1a0:	28 42 00 00 	lw r2,(r2+0)
 1a4:	34 03 00 01 	mvi r3,1
timer0->RS=0;
timer0->RW=0;
switch(c_inicio){
 1a8:	34 04 00 02 	mvi r4,2
//////////////////////////////////////LCD



void lcd_iniciar(int c_inicio){
timer0->E=1;
 1ac:	58 43 00 0c 	sw (r2+12),r3
timer0->RS=0;
 1b0:	58 40 00 04 	sw (r2+4),r0
timer0->RW=0;
 1b4:	58 40 00 08 	sw (r2+8),r0
switch(c_inicio){
 1b8:	44 24 00 0b 	be r1,r4,1e4 <lcd_iniciar+0x4c>
 1bc:	34 04 00 03 	mvi r4,3
 1c0:	44 24 00 06 	be r1,r4,1d8 <lcd_iniciar+0x40>
 1c4:	44 23 00 02 	be r1,r3,1cc <lcd_iniciar+0x34>
 1c8:	c3 a0 00 00 	ret
case 1: timer0->Data_out=0x0f; break;	
 1cc:	34 01 00 0f 	mvi r1,15
 1d0:	58 41 00 10 	sw (r2+16),r1
 1d4:	c3 a0 00 00 	ret
case 2: timer0->Data_out=0x38;break;	
case 3: timer0->Data_out=0x83;break;   	//Direccion a apuntar
 1d8:	34 01 00 83 	mvi r1,131
 1dc:	58 41 00 10 	sw (r2+16),r1
 1e0:	c3 a0 00 00 	ret
timer0->E=1;
timer0->RS=0;
timer0->RW=0;
switch(c_inicio){
case 1: timer0->Data_out=0x0f; break;	
case 2: timer0->Data_out=0x38;break;	
 1e4:	34 01 00 38 	mvi r1,56
 1e8:	58 41 00 10 	sw (r2+16),r1
 1ec:	c3 a0 00 00 	ret

000001f0 <titulo>:



void titulo(int paso){

timer0->E=1;
 1f0:	78 02 00 00 	mvhi r2,0x0
 1f4:	38 42 03 80 	ori r2,r2,0x380
 1f8:	28 42 00 00 	lw r2,(r2+0)
 1fc:	34 04 00 01 	mvi r4,1
timer0->RS=1;
timer0->RW=0;

switch(paso){
 200:	34 21 ff fc 	addi r1,r1,-4



void titulo(int paso){

timer0->E=1;
 204:	58 44 00 0c 	sw (r2+12),r4
timer0->RS=1;
 208:	58 44 00 04 	sw (r2+4),r4
timer0->RW=0;
 20c:	58 40 00 08 	sw (r2+8),r0

switch(paso){
 210:	34 03 00 09 	mvi r3,9
 214:	54 23 00 09 	bgu r1,r3,238 <titulo+0x48>
 218:	3c 21 00 02 	sli r1,r1,2
 21c:	78 03 00 00 	mvhi r3,0x0
 220:	38 63 03 40 	ori r3,r3,0x340
 224:	b4 61 18 00 	add r3,r3,r1
 228:	28 61 00 00 	lw r1,(r3+0)
 22c:	c0 20 00 00 	b r1
case 8:  timer0->Data_out=0x56;break;	//V
case 9: timer0->Data_out=0x45;break;	//E
case 10: timer0->Data_out=0x4e;break;	//N
case 11: timer0->Data_out=0x49;break;	//I
case 12: timer0->Data_out=0x44;break;	//D
case 13: timer0->Data_out=0x4f;break;	//O
 230:	34 01 00 4f 	mvi r1,79
 234:	58 41 00 10 	sw (r2+16),r1
 238:	c3 a0 00 00 	ret
case 4:  timer0->Data_out=0x42;break;	//B
case 5:  timer0->Data_out=0x49;break;	//I
case 6:  timer0->Data_out=0x45;break;	//E
case 7:  timer0->Data_out=0x4e;break;	//N
case 8:  timer0->Data_out=0x56;break;	//V
case 9: timer0->Data_out=0x45;break;	//E
 23c:	34 01 00 45 	mvi r1,69
 240:	58 41 00 10 	sw (r2+16),r1
 244:	c3 a0 00 00 	ret
case 10: timer0->Data_out=0x4e;break;	//N
case 11: timer0->Data_out=0x49;break;	//I
 248:	34 01 00 49 	mvi r1,73
 24c:	58 41 00 10 	sw (r2+16),r1
 250:	c3 a0 00 00 	ret
case 5:  timer0->Data_out=0x49;break;	//I
case 6:  timer0->Data_out=0x45;break;	//E
case 7:  timer0->Data_out=0x4e;break;	//N
case 8:  timer0->Data_out=0x56;break;	//V
case 9: timer0->Data_out=0x45;break;	//E
case 10: timer0->Data_out=0x4e;break;	//N
 254:	34 01 00 4e 	mvi r1,78
 258:	58 41 00 10 	sw (r2+16),r1
 25c:	c3 a0 00 00 	ret
timer0->E=1;
timer0->RS=1;
timer0->RW=0;

switch(paso){
case 4:  timer0->Data_out=0x42;break;	//B
 260:	34 01 00 42 	mvi r1,66
 264:	58 41 00 10 	sw (r2+16),r1
 268:	c3 a0 00 00 	ret
case 7:  timer0->Data_out=0x4e;break;	//N
case 8:  timer0->Data_out=0x56;break;	//V
case 9: timer0->Data_out=0x45;break;	//E
case 10: timer0->Data_out=0x4e;break;	//N
case 11: timer0->Data_out=0x49;break;	//I
case 12: timer0->Data_out=0x44;break;	//D
 26c:	34 01 00 44 	mvi r1,68
 270:	58 41 00 10 	sw (r2+16),r1
 274:	c3 a0 00 00 	ret
switch(paso){
case 4:  timer0->Data_out=0x42;break;	//B
case 5:  timer0->Data_out=0x49;break;	//I
case 6:  timer0->Data_out=0x45;break;	//E
case 7:  timer0->Data_out=0x4e;break;	//N
case 8:  timer0->Data_out=0x56;break;	//V
 278:	34 01 00 56 	mvi r1,86
 27c:	58 41 00 10 	sw (r2+16),r1
 280:	c3 a0 00 00 	ret

00000284 <espacio1>:
					//Del caso 4 al 13

}}

void espacio1(int esp){
timer0->E=1;
 284:	78 02 00 00 	mvhi r2,0x0
 288:	38 42 03 80 	ori r2,r2,0x380
 28c:	28 42 00 00 	lw r2,(r2+0)
 290:	34 03 00 01 	mvi r3,1
 294:	58 43 00 0c 	sw (r2+12),r3
timer0->RS=0;
 298:	58 40 00 04 	sw (r2+4),r0
timer0->RW=0;
 29c:	58 40 00 08 	sw (r2+8),r0
switch(esp){
 2a0:	34 03 00 0e 	mvi r3,14
 2a4:	44 23 00 02 	be r1,r3,2ac <espacio1+0x28>
 2a8:	c3 a0 00 00 	ret
case 14: timer0->Data_out=0xc5; break;	
 2ac:	34 01 00 c5 	mvi r1,197
 2b0:	58 41 00 10 	sw (r2+16),r1
 2b4:	c3 a0 00 00 	ret

000002b8 <titulo1>:
  				//Direccion a apuntar Caso 14
}}

void titulo1(int paso1){

timer0->E=1;
 2b8:	78 02 00 00 	mvhi r2,0x0
 2bc:	38 42 03 80 	ori r2,r2,0x380
 2c0:	28 42 00 00 	lw r2,(r2+0)
 2c4:	34 03 00 01 	mvi r3,1
timer0->RS=1;
timer0->RW=0;

switch(paso1){
 2c8:	34 21 ff f1 	addi r1,r1,-15
  				//Direccion a apuntar Caso 14
}}

void titulo1(int paso1){

timer0->E=1;
 2cc:	58 43 00 0c 	sw (r2+12),r3
timer0->RS=1;
 2d0:	58 43 00 04 	sw (r2+4),r3
timer0->RW=0;
 2d4:	58 40 00 08 	sw (r2+8),r0

switch(paso1){
 2d8:	34 03 00 05 	mvi r3,5
 2dc:	54 23 00 09 	bgu r1,r3,300 <titulo1+0x48>
 2e0:	3c 21 00 02 	sli r1,r1,2
 2e4:	78 03 00 00 	mvhi r3,0x0
 2e8:	38 63 03 68 	ori r3,r3,0x368
 2ec:	b4 61 18 00 	add r3,r3,r1
 2f0:	28 61 00 00 	lw r1,(r3+0)
 2f4:	c0 20 00 00 	b r1
case 15:  timer0->Data_out=0x4b;break;	//K
case 16:  timer0->Data_out=0x45;break;	//E
case 17:  timer0->Data_out=0x59;break;	//Y 
case 18:  timer0->Data_out=0xb0;break;	//-
case 19:  timer0->Data_out=0x50;break;	//P
case 20:  timer0->Data_out=0x49;break;	//I
 2f8:	34 01 00 49 	mvi r1,73
 2fc:	58 41 00 10 	sw (r2+16),r1
 300:	c3 a0 00 00 	ret
switch(paso1){
case 15:  timer0->Data_out=0x4b;break;	//K
case 16:  timer0->Data_out=0x45;break;	//E
case 17:  timer0->Data_out=0x59;break;	//Y 
case 18:  timer0->Data_out=0xb0;break;	//-
case 19:  timer0->Data_out=0x50;break;	//P
 304:	34 01 00 50 	mvi r1,80
 308:	58 41 00 10 	sw (r2+16),r1
 30c:	c3 a0 00 00 	ret
timer0->E=1;
timer0->RS=1;
timer0->RW=0;

switch(paso1){
case 15:  timer0->Data_out=0x4b;break;	//K
 310:	34 01 00 4b 	mvi r1,75
 314:	58 41 00 10 	sw (r2+16),r1
 318:	c3 a0 00 00 	ret
case 16:  timer0->Data_out=0x45;break;	//E
 31c:	34 01 00 45 	mvi r1,69
 320:	58 41 00 10 	sw (r2+16),r1
 324:	c3 a0 00 00 	ret
case 17:  timer0->Data_out=0x59;break;	//Y 
 328:	34 01 00 59 	mvi r1,89
 32c:	58 41 00 10 	sw (r2+16),r1
 330:	c3 a0 00 00 	ret
case 18:  timer0->Data_out=0xb0;break;	//-
 334:	34 01 00 b0 	mvi r1,176
 338:	58 41 00 10 	sw (r2+16),r1
 33c:	c3 a0 00 00 	ret
