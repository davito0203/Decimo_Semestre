
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .data         0000000c  00000168  00000168  000001bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000174  00000174  000001c8  2**2
                  ALLOC
  3 .debug_abbrev 000001d6  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000369  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016a  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000006a  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000ac  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000040  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015a  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000027  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY
 12 .debug_pubtypes 00000041  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 01 80 	ori gp,gp,0x180
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 01 74 	ori r1,r1,0x174
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 01 78 	ori r3,r3,0x178

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 0c 	calli 8c <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <main>:
	  {
		int a=255;
		int b=255;
		int c=0;
		c=a+b;		
	  }
  8c:	c3 a0 00 00 	ret

00000090 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
  90:	78 02 00 00 	mvhi r2,0x0
  94:	38 42 01 6c 	ori r2,r2,0x16c
  98:	38 03 c3 50 	mvu r3,0xc350
  9c:	28 42 00 00 	lw r2,(r2+0)
  a0:	88 23 08 00 	mul r1,r1,r3
  a4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
  a8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
  ac:	34 01 00 0a 	mvi r1,10
  b0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
  b4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
  b8:	20 21 00 01 	andi r1,r1,0x1
  bc:	44 20 ff fe 	be r1,r0,b4 <sleep+0x24>
}
  c0:	c3 a0 00 00 	ret

000000c4 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
  c4:	78 01 00 00 	mvhi r1,0x0
  c8:	38 21 01 6c 	ori r1,r1,0x16c
  cc:	28 21 00 00 	lw r1,(r1+0)
  d0:	38 02 c3 50 	mvu r2,0xc350
  d4:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
  d8:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
  dc:	34 02 00 0e 	mvi r2,14
  e0:	58 22 00 00 	sw (r1+0),r2
}
  e4:	c3 a0 00 00 	ret

000000e8 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
  e8:	c3 a0 00 00 	ret

000000ec <uart_getchar>:

char uart_getchar()
{   
  ec:	78 01 00 00 	mvhi r1,0x0
  f0:	38 21 01 68 	ori r1,r1,0x168
  f4:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
  f8:	28 41 00 00 	lw r1,(r2+0)
  fc:	20 21 00 01 	andi r1,r1,0x1
 100:	44 20 ff fe 	be r1,r0,f8 <uart_getchar+0xc>
	return uart0->rxtx;
 104:	28 41 00 04 	lw r1,(r2+4)
}
 108:	20 21 00 ff 	andi r1,r1,0xff
 10c:	c3 a0 00 00 	ret

00000110 <uart_putchar>:

void uart_putchar(char c)
{
 110:	78 02 00 00 	mvhi r2,0x0
 114:	38 42 01 68 	ori r2,r2,0x168
 118:	28 43 00 00 	lw r3,(r2+0)
 11c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 120:	28 62 00 00 	lw r2,(r3+0)
 124:	20 42 00 10 	andi r2,r2,0x10
 128:	5c 40 ff fe 	bne r2,r0,120 <uart_putchar+0x10>
	uart0->rxtx = c;
 12c:	58 61 00 04 	sw (r3+4),r1
}
 130:	c3 a0 00 00 	ret

00000134 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 134:	40 24 00 00 	lbu r4,(r1+0)
 138:	44 80 00 0b 	be r4,r0,164 <uart_putstr+0x30>
 13c:	78 02 00 00 	mvhi r2,0x0
 140:	38 42 01 68 	ori r2,r2,0x168
 144:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 148:	28 62 00 00 	lw r2,(r3+0)
 14c:	20 42 00 10 	andi r2,r2,0x10
 150:	5c 40 ff fe 	bne r2,r0,148 <uart_putstr+0x14>
	uart0->rxtx = c;
 154:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 158:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 15c:	40 24 00 00 	lbu r4,(r1+0)
 160:	5c 82 ff fa 	bne r4,r2,148 <uart_putstr+0x14>
 164:	c3 a0 00 00 	ret
