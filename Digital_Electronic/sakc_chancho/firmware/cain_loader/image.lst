
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000248  0000041c  0000041c  00000470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000000c  00000664  00000664  000006b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00000670  00000670  000006c4  2**2
                  ALLOC
  4 .debug_abbrev 00000378  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042e  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000003a4  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000000e7  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000007c  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000060  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001d5  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000027  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000050  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 06 70 	ori gp,gp,0x670
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 06 70 	ori r1,r1,0x670
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 06 74 	ori r3,r3,0x674

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 32 	calli 124 <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <hexprint>:
#include "soc-hw.h"



void hexprint(unsigned int hexval)
{
  8c:	37 9c ff e8 	addi sp,sp,-24
  90:	5b 8b 00 10 	sw (sp+16),r11
  94:	5b 8c 00 0c 	sw (sp+12),r12
  98:	5b 8d 00 08 	sw (sp+8),r13
  9c:	5b 9d 00 04 	sw (sp+4),ra
  a0:	b8 20 58 00 	mv r11,r1
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
  a4:	78 01 00 00 	mvhi r1,0x0
  a8:	38 21 04 1c 	ori r1,r1,0x41c
  ac:	f8 00 00 6a 	calli 254 <uart_putstr>
  b0:	37 82 00 14 	addi r2,sp,20
 */
#include "soc-hw.h"



void hexprint(unsigned int hexval)
  b4:	b8 40 68 00 	mv r13,r2
  b8:	37 83 00 1c 	addi r3,sp,28
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
  for(pos = 0; pos < 8; pos++)
    {
      digit[pos] = (hexval & 0x0F);  /* last hexit */
  bc:	21 61 00 0f 	andi r1,r11,0xf
  c0:	30 41 00 00 	sb (r2+0),r1
      hexval = hexval >> 4;
  c4:	34 42 00 01 	addi r2,r2,1
  c8:	01 6b 00 04 	srui r11,r11,4
void hexprint(unsigned int hexval)
{
  unsigned char digit[8];
  int pos;
  uart_putstr("0x");
  for(pos = 0; pos < 8; pos++)
  cc:	5c 43 ff fc 	bne r2,r3,bc <hexprint+0x30>
  d0:	37 8b 00 1b 	addi r11,sp,27
 */
#include "soc-hw.h"



void hexprint(unsigned int hexval)
  d4:	35 ad ff ff 	addi r13,r13,-1
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
  d8:	34 0c 00 09 	mvi r12,9
  dc:	41 62 00 00 	lbu r2,(r11+0)
        uart_putchar(digit[pos] + '0' );
  e0:	34 41 00 30 	addi r1,r2,48
      else
        uart_putchar(digit[pos] + 'A' - 10);
  e4:	34 43 00 37 	addi r3,r2,55
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
        uart_putchar(digit[pos] + '0' );
  e8:	20 21 00 ff 	andi r1,r1,0xff
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
  ec:	54 4c 00 0c 	bgu r2,r12,11c <hexprint+0x90>
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
  f0:	35 6b ff ff 	addi r11,r11,-1
  f4:	f8 00 00 4f 	calli 230 <uart_putchar>
  for(pos = 0; pos < 8; pos++)
    {
      digit[pos] = (hexval & 0x0F);  /* last hexit */
      hexval = hexval >> 4;
    }
  for(pos = 7; pos > -1; pos--)
  f8:	5d 6d ff f9 	bne r11,r13,dc <hexprint+0x50>
      if( digit[pos] < 0x0A)
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
    }
  uart_putchar('.');
  fc:	34 01 00 2e 	mvi r1,46
 100:	f8 00 00 4c 	calli 230 <uart_putchar>
}
 104:	2b 9d 00 04 	lw ra,(sp+4)
 108:	2b 8b 00 10 	lw r11,(sp+16)
 10c:	2b 8c 00 0c 	lw r12,(sp+12)
 110:	2b 8d 00 08 	lw r13,(sp+8)
 114:	37 9c 00 18 	addi sp,sp,24
 118:	c3 a0 00 00 	ret
  for(pos = 7; pos > -1; pos--)
    {
      if( digit[pos] < 0x0A)
        uart_putchar(digit[pos] + '0' );
      else
        uart_putchar(digit[pos] + 'A' - 10);
 11c:	20 61 00 ff 	andi r1,r3,0xff
 120:	e3 ff ff f4 	bi f0 <hexprint+0x64>

00000124 <main>:
  uart_putchar('.');
}


int main(int argc, char **argv)
{
 124:	37 9c ff e4 	addi sp,sp,-28
 128:	5b 8b 00 1c 	sw (sp+28),r11
 12c:	5b 8c 00 18 	sw (sp+24),r12
 130:	5b 8d 00 14 	sw (sp+20),r13
 134:	5b 8e 00 10 	sw (sp+16),r14
 138:	5b 8f 00 0c 	sw (sp+12),r15
 13c:	5b 90 00 08 	sw (sp+8),r16
 140:	5b 9d 00 04 	sw (sp+4),ra
 144:	78 0b 00 00 	mvhi r11,0x0
 148:	78 10 00 00 	mvhi r16,0x0
 14c:	78 0f 00 00 	mvhi r15,0x0
 150:	78 0c 00 00 	mvhi r12,0x0
  b = 980;
  r = 0;
  unsigned int key, len, autoboot = 1, dispmenu = 1;

  // Initialize UART
  uart_init();
 154:	f8 00 00 2d 	calli 208 <uart_init>
 158:	39 6b 04 20 	ori r11,r11,0x420
 15c:	3a 10 04 3c 	ori r16,r16,0x43c
 160:	39 ef 04 48 	ori r15,r15,0x448
 164:	39 8c 04 54 	ori r12,r12,0x454
//      uart_putstr("6: Memory test\r\n");
      dispmenu = 0;
    }
    key = uart_getchar();
    autoboot = 0;
    if(key == '1'){
 168:	34 0d 00 31 	mvi r13,49
 16c:	e0 00 00 03 	bi 178 <main+0x54>
      uart_putstr(" bytes\r\n");
//      jump(0x1000);
      dispmenu = 1;
    }
    else{
      uart_putstr("Invalid input\r\n");
 170:	b9 80 08 00 	mv r1,r12
 174:	f8 00 00 38 	calli 254 <uart_putstr>
  uart_init();

  while(1){ /* loop forever until u-boot gets booted or the board is reset */
    if(dispmenu){
     r = a*b;	
     uart_putstr("\n1: Upload program to RAM\r\n");
 178:	b9 60 08 00 	mv r1,r11
 17c:	f8 00 00 36 	calli 254 <uart_putstr>
//      uart_putstr("4: Start u-boot\r\n");
//      uart_putstr("5: Upload Filesystem image\r\n");
//      uart_putstr("6: Memory test\r\n");
      dispmenu = 0;
    }
    key = uart_getchar();
 180:	f8 00 00 23 	calli 20c <uart_getchar>
    autoboot = 0;
    if(key == '1'){
 184:	5c 2d ff fb 	bne r1,r13,170 <main+0x4c>
      len = rxmodem((unsigned char *)0x800);
 188:	34 01 08 00 	mvi r1,2048
 18c:	f8 00 00 52 	calli 2d4 <rxmodem>
 190:	b8 20 70 00 	mv r14,r1
      uart_putstr("Received ");
 194:	ba 00 08 00 	mv r1,r16
 198:	f8 00 00 2f 	calli 254 <uart_putstr>
      hexprint(len);
 19c:	b9 c0 08 00 	mv r1,r14
 1a0:	fb ff ff bb 	calli 8c <hexprint>
      uart_putstr(" bytes\r\n");
 1a4:	b9 e0 08 00 	mv r1,r15
 1a8:	f8 00 00 2b 	calli 254 <uart_putstr>
 1ac:	e3 ff ff f3 	bi 178 <main+0x54>

000001b0 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 1b0:	78 02 00 00 	mvhi r2,0x0
 1b4:	38 42 06 68 	ori r2,r2,0x668
 1b8:	38 03 c3 50 	mvu r3,0xc350
 1bc:	28 42 00 00 	lw r2,(r2+0)
 1c0:	88 23 08 00 	mul r1,r1,r3
 1c4:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 1c8:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 1cc:	34 01 00 0a 	mvi r1,10
 1d0:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 1d4:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 1d8:	20 21 00 01 	andi r1,r1,0x1
 1dc:	44 20 ff fe 	be r1,r0,1d4 <sleep+0x24>
}
 1e0:	c3 a0 00 00 	ret

000001e4 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 1e4:	78 01 00 00 	mvhi r1,0x0
 1e8:	38 21 06 68 	ori r1,r1,0x668
 1ec:	28 21 00 00 	lw r1,(r1+0)
 1f0:	38 02 c3 50 	mvu r2,0xc350
 1f4:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
 1f8:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 1fc:	34 02 00 0e 	mvi r2,14
 200:	58 22 00 00 	sw (r1+0),r2
}
 204:	c3 a0 00 00 	ret

00000208 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 208:	c3 a0 00 00 	ret

0000020c <uart_getchar>:

unsigned char uart_getchar()
{   
 20c:	78 01 00 00 	mvhi r1,0x0
 210:	38 21 06 64 	ori r1,r1,0x664
 214:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 218:	28 41 00 00 	lw r1,(r2+0)
 21c:	20 21 00 01 	andi r1,r1,0x1
 220:	44 20 ff fe 	be r1,r0,218 <uart_getchar+0xc>
	return (uart0->rxtx) & 0xFF;
 224:	28 41 00 04 	lw r1,(r2+4)
}
 228:	20 21 00 ff 	andi r1,r1,0xff
 22c:	c3 a0 00 00 	ret

00000230 <uart_putchar>:

void uart_putchar(unsigned char c)
{
 230:	78 02 00 00 	mvhi r2,0x0
 234:	38 42 06 64 	ori r2,r2,0x664
 238:	28 43 00 00 	lw r3,(r2+0)
 23c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 240:	28 62 00 00 	lw r2,(r3+0)
 244:	20 42 00 10 	andi r2,r2,0x10
 248:	5c 40 ff fe 	bne r2,r0,240 <uart_putchar+0x10>
	uart0->rxtx = c;
 24c:	58 61 00 04 	sw (r3+4),r1
}
 250:	c3 a0 00 00 	ret

00000254 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 254:	40 24 00 00 	lbu r4,(r1+0)
 258:	44 80 00 0b 	be r4,r0,284 <uart_putstr+0x30>
 25c:	78 02 00 00 	mvhi r2,0x0
 260:	38 42 06 64 	ori r2,r2,0x664
 264:	28 43 00 00 	lw r3,(r2+0)
	return (uart0->rxtx) & 0xFF;
}

void uart_putchar(unsigned char c)
{
	while (uart0->ucr & UART_BUSY) ;
 268:	28 62 00 00 	lw r2,(r3+0)
 26c:	20 42 00 10 	andi r2,r2,0x10
 270:	5c 40 ff fe 	bne r2,r0,268 <uart_putstr+0x14>
	uart0->rxtx = c;
 274:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 278:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 27c:	40 24 00 00 	lbu r4,(r1+0)
 280:	5c 82 ff fa 	bne r4,r2,268 <uart_putstr+0x14>
 284:	c3 a0 00 00 	ret

00000288 <crc16_ccitt>:
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
 288:	b8 20 40 00 	mv r8,r1
	int counter;
	unsigned short crc = 0;
 28c:	34 01 00 00 	mvi r1,0
	for( counter = 0; counter < len; counter++)
 290:	4c 02 00 10 	bge r0,r2,2d0 <crc16_ccitt+0x48>
 294:	78 07 00 00 	mvhi r7,0x0
 298:	34 03 00 00 	mvi r3,0
 29c:	38 e7 04 64 	ori r7,r7,0x464
	0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
unsigned short crc16_ccitt(const void *buf, int len)
 2a0:	b5 03 20 00 	add r4,r8,r3
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 2a4:	40 85 00 00 	lbu r5,(r4+0)
 2a8:	00 26 00 08 	srui r6,r1,8
 2ac:	3c 24 00 08 	sli r4,r1,8
 2b0:	98 c5 28 00 	xor r5,r6,r5
 2b4:	3c a5 00 01 	sli r5,r5,1
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 2b8:	34 63 00 01 	addi r3,r3,1
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 2bc:	b4 e5 28 00 	add r5,r7,r5
 2c0:	2c a5 00 00 	lhu r5,(r5+0)
 2c4:	98 a4 20 00 	xor r4,r5,r4
 2c8:	20 81 ff ff 	andi r1,r4,0xffff
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 2cc:	5c 62 ff f5 	bne r3,r2,2a0 <crc16_ccitt+0x18>
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
	return crc;
}
 2d0:	c3 a0 00 00 	ret

000002d4 <rxmodem>:

int rxmodem(unsigned char *dest)
{
 2d4:	37 9c ff e0 	addi sp,sp,-32
 2d8:	5b 8b 00 20 	sw (sp+32),r11
 2dc:	5b 8c 00 1c 	sw (sp+28),r12
 2e0:	5b 8d 00 18 	sw (sp+24),r13
 2e4:	5b 8e 00 14 	sw (sp+20),r14
 2e8:	5b 8f 00 10 	sw (sp+16),r15
 2ec:	5b 90 00 0c 	sw (sp+12),r16
 2f0:	5b 91 00 08 	sw (sp+8),r17
 2f4:	5b 9d 00 04 	sw (sp+4),ra
 2f8:	b8 20 60 00 	mv r12,r1
	unsigned short crc, tcrc;
	int i, len = 0;
        unsigned char pid = 1;

	uart_getchar();
 2fc:	fb ff ff c4 	calli 20c <uart_getchar>
 300:	78 01 04 00 	mvhi r1,0x400
        for(i = 0; i < 0x4000000; i++) { asm("nop;"); }   
 304:	34 00 00 00 	nop
 308:	34 21 ff ff 	addi r1,r1,-1
 30c:	5c 20 ff fe 	bne r1,r0,304 <rxmodem+0x30>
	uart_putchar('C');
 310:	34 01 00 43 	mvi r1,67
 314:	78 0d 00 00 	mvhi r13,0x0
 318:	fb ff ff c6 	calli 230 <uart_putchar>
	{
		unsigned char c, pid1, pid2;

		c = uart_getchar() & 0xFF;

		if (c != SOH)
 31c:	34 11 00 01 	mvi r17,1

int rxmodem(unsigned char *dest)
{
	unsigned short crc, tcrc;
	int i, len = 0;
        unsigned char pid = 1;
 320:	34 10 00 01 	mvi r16,1
}

int rxmodem(unsigned char *dest)
{
	unsigned short crc, tcrc;
	int i, len = 0;
 324:	34 0f 00 00 	mvi r15,0
			return 0;

		if (pid1 != pid)
			return 0;

		for (i = 0; i < 130; i++)
 328:	34 0e 00 82 	mvi r14,130
 32c:	39 ad 04 64 	ori r13,r13,0x464

	while(1)
	{
		unsigned char c, pid1, pid2;

		c = uart_getchar() & 0xFF;
 330:	fb ff ff b7 	calli 20c <uart_getchar>

		if (c != SOH)
 334:	5c 31 00 29 	bne r1,r17,3d8 <rxmodem+0x104>
			}
			else
				return 0;
		}

		pid1 = uart_getchar() & 0xFF;
 338:	fb ff ff b5 	calli 20c <uart_getchar>
 33c:	b8 20 58 00 	mv r11,r1
		pid2 = uart_getchar() & 0xFF;
 340:	fb ff ff b3 	calli 20c <uart_getchar>

		if ((pid1 & 0xFF) != (~pid2 & 0xFF))
 344:	a4 20 08 00 	not r1,r1
 348:	20 21 00 ff 	andi r1,r1,0xff
 34c:	5d 61 00 25 	bne r11,r1,3e0 <rxmodem+0x10c>
			return 0;

		if (pid1 != pid)
 350:	5d 70 00 24 	bne r11,r16,3e0 <rxmodem+0x10c>
 354:	34 0b 00 00 	mvi r11,0
			return 0;

		for (i = 0; i < 130; i++)
			*dest++ = uart_getchar();
 358:	fb ff ff ad 	calli 20c <uart_getchar>
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
	return crc;
}

int rxmodem(unsigned char *dest)
 35c:	b5 8b 18 00 	add r3,r12,r11

		if (pid1 != pid)
			return 0;

		for (i = 0; i < 130; i++)
			*dest++ = uart_getchar();
 360:	30 61 00 00 	sb (r3+0),r1
			return 0;

		if (pid1 != pid)
			return 0;

		for (i = 0; i < 130; i++)
 364:	35 6b 00 01 	addi r11,r11,1
 368:	5d 6e ff fc 	bne r11,r14,358 <rxmodem+0x84>
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
	return crc;
}

int rxmodem(unsigned char *dest)
 36c:	35 86 00 80 	addi r6,r12,128
 370:	b9 80 10 00 	mv r2,r12
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	int counter;
	unsigned short crc = 0;
 374:	34 03 00 00 	mvi r3,0
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 378:	40 44 00 00 	lbu r4,(r2+0)
 37c:	00 65 00 08 	srui r5,r3,8
 380:	3c 63 00 08 	sli r3,r3,8
 384:	98 a4 20 00 	xor r4,r5,r4
 388:	3c 84 00 01 	sli r4,r4,1
 38c:	34 42 00 01 	addi r2,r2,1
 390:	b5 a4 20 00 	add r4,r13,r4
 394:	2c 84 00 00 	lhu r4,(r4+0)
 398:	98 83 18 00 	xor r3,r4,r3
 39c:	20 63 ff ff 	andi r3,r3,0xffff
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 3a0:	5c c2 ff f6 	bne r6,r2,378 <rxmodem+0xa4>

		for (i = 0; i < 130; i++)
			*dest++ = uart_getchar();

		crc = crc16_ccitt (dest - 130, 128);
		tcrc = (*(dest - 2)<<8) + *(dest - 1);
 3a4:	40 c2 00 00 	lbu r2,(r6+0)
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 3a8:	b8 c0 60 00 	mv r12,r6

		for (i = 0; i < 130; i++)
			*dest++ = uart_getchar();

		crc = crc16_ccitt (dest - 130, 128);
		tcrc = (*(dest - 2)<<8) + *(dest - 1);
 3ac:	3c 42 00 08 	sli r2,r2,8
 3b0:	b4 22 08 00 	add r1,r1,r2
		if (crc != tcrc)
 3b4:	20 21 ff ff 	andi r1,r1,0xffff
 3b8:	5c 23 00 0a 	bne r1,r3,3e0 <rxmodem+0x10c>
			return 0;
		else
		{
			pid = (pid + 1) & 0xFF;
 3bc:	36 10 00 01 	addi r16,r16,1
			dest -= 2;
			len += 128;
			uart_putchar(ACK);
 3c0:	34 01 00 06 	mvi r1,6
		tcrc = (*(dest - 2)<<8) + *(dest - 1);
		if (crc != tcrc)
			return 0;
		else
		{
			pid = (pid + 1) & 0xFF;
 3c4:	22 10 00 ff 	andi r16,r16,0xff
			dest -= 2;
			len += 128;
 3c8:	35 ef 00 80 	addi r15,r15,128
			uart_putchar(ACK);
 3cc:	fb ff ff 99 	calli 230 <uart_putchar>

	while(1)
	{
		unsigned char c, pid1, pid2;

		c = uart_getchar() & 0xFF;
 3d0:	fb ff ff 8f 	calli 20c <uart_getchar>

		if (c != SOH)
 3d4:	44 31 ff d9 	be r1,r17,338 <rxmodem+0x64>
		{
			if (c == EOT)
 3d8:	34 02 00 04 	mvi r2,4
 3dc:	44 22 00 0d 	be r1,r2,410 <rxmodem+0x13c>
			*dest++ = uart_getchar();

		crc = crc16_ccitt (dest - 130, 128);
		tcrc = (*(dest - 2)<<8) + *(dest - 1);
		if (crc != tcrc)
			return 0;
 3e0:	34 0f 00 00 	mvi r15,0
			dest -= 2;
			len += 128;
			uart_putchar(ACK);
		}
	}
}
 3e4:	b9 e0 08 00 	mv r1,r15
 3e8:	2b 9d 00 04 	lw ra,(sp+4)
 3ec:	2b 8b 00 20 	lw r11,(sp+32)
 3f0:	2b 8c 00 1c 	lw r12,(sp+28)
 3f4:	2b 8d 00 18 	lw r13,(sp+24)
 3f8:	2b 8e 00 14 	lw r14,(sp+20)
 3fc:	2b 8f 00 10 	lw r15,(sp+16)
 400:	2b 90 00 0c 	lw r16,(sp+12)
 404:	2b 91 00 08 	lw r17,(sp+8)
 408:	37 9c 00 20 	addi sp,sp,32
 40c:	c3 a0 00 00 	ret

		if (c != SOH)
		{
			if (c == EOT)
			{
				uart_putchar(ACK);
 410:	34 01 00 06 	mvi r1,6
 414:	fb ff ff 87 	calli 230 <uart_putchar>
				return len;
 418:	e3 ff ff f3 	bi 3e4 <rxmodem+0x110>
